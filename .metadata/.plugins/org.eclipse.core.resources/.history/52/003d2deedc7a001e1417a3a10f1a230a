package FileSearchTool;

import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.stream.Collectors;

public class FileResultsCollection {
    private List<FileResult> results;

    public FileResultsCollection(List<FileResult> results) {
        this.results = results;
    }

    public void displayResults(List<FileResult> resultsToDisplay) {
        // Implement code to display the results to the user
        if (resultsToDisplay.isEmpty()) {
            System.out.println("No results found.");
        } else {
            System.out.println("Search Results:");
            for (FileResult result : resultsToDisplay) {
                System.out.println(result); // Utilizes the toString method in FileResult
                System.out.println("------------------------------");
            }
        }
    }

    public void sortResults(Comparator<FileResult> comparator) {
        // Implement code to sort the results based on user-defined criteria
        Collections.sort(results, comparator);
    }

    public List<FileResult> filterResults(String fileExtension, long minSize, long maxSize) {
        // Implement code to filter the results based on user-defined criteria

        // Use Java streams for filtering
        List<FileResult> filteredResults = results.stream()
                .filter(result -> {
                    boolean extensionMatch = fileExtension.isEmpty() || result.getFileName().endsWith(fileExtension);
                    boolean sizeMatch = (minSize == 0 || result.getFileSize() >= minSize) &&
                                        (maxSize == 0 || result.getFileSize() <= maxSize);
                    return extensionMatch && sizeMatch;
                })
                .collect(Collectors.toList());

        return filteredResults;
    }
}
